export const handleHateKeyboard = (items) => {
    const keyboard = [
        [{ text: 'ü•õ –ú–æ–ª–æ–∫–æ', callback_data: 'hatemilk' }],
        [{ text: 'üçç –§—Ä—É–∫—Ç—ã', callback_data: 'hatefruits' }],
        [{ text: 'ü•í –û–≤–æ—â–∏', callback_data: 'hatevegetables' }],
        [{ text: 'üêü –†—ã–±–∞', callback_data: 'hatefish' }],
        [{ text: 'üç≠ –°–ª–∞–¥–∫–æ–µ', callback_data: 'hatesweet' }],
        [{ text: 'ü•Ñ –°–æ–ª—ë–Ω–æ–µ', callback_data: 'hatesalt' }],
        [{ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'hateMeat' }],
    ]

    return {
        inline_keyboard: keyboard.map((item, key) => {
            const index = Object.keys(items)[key];
            const bool = items[index];
            if (keyboard.length - key !== 1) {
                return item.map(item => {
                    return bool ? { text: item.text + ' ‚ùå', callback_data: 'hate' + index } : { text: item.text, callback_data: 'hate' + index }
                })
            } else {
                return [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'hateMeat' }]
            }
        })
    }
}

export const handleMeatKeyboard = (items) => {
    const keyboard = [
        [{ text: '–°–≤–∏–Ω–∏–Ω–∞', callback_data: 'hatepork' }],
        [{ text: '–ì–æ–≤—è–¥–∏–Ω–∞', callback_data: 'hatebeef' }],
        [{ text: '–ö—É—Ä–∏—Ü–∞', callback_data: 'hatechicken' }],
        [{ text: '–ë–∞—Ä–∞–Ω–∏–Ω–∞', callback_data: 'hatemutton' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'hateBack' }],
        [{ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'hateJunk' }],
    ]

    return {
        inline_keyboard: keyboard.map((item, key) => {
            var index = Object.keys(items)[key];
            const bool = items[index];
            if (keyboard.length - key > 2) {
                return item.map(item => {
                    return bool ? { text: item.text + ' ‚ùå', callback_data: 'hate' + index } : { text: item.text, callback_data: 'hate' + index }
                })
            } else {
                return [{ text: item[0].text, callback_data: item[0].callback_data }]
            }
        })
    }
}

export const handleJunkKeyboard = (junk) => {
    return {
        inline_keyboard: [
            junk === 'yes' ? [{ text: '–î–∞ ‚úÖ', callback_data: 'junkyes' }] : [{ text: '–î–∞', callback_data: 'junkyes' }],
            junk === 'no' ? [{ text: '–ù–µ—Ç ‚ùå', callback_data: 'junkno' }] : [{ text: '–ù–µ—Ç', callback_data: 'junkno' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'hateMeat' }],
            [{ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'hateNext' }],
        ]
    }

    /*return {
        inline_keyboard: keyboard.map((item, key) => {
            if (keyboard.length - key > 2) {
                return junk === item[0].callback_data ? [{ text: item[0].text + ' ‚úÖ', callback_data: 'junk' + item[0].callback_data }] : [{ text: item[0].text, callback_data: 'junk' + item[0].callback_data }]
            } else {
                return [{ text: item[0].text, callback_data: item[0].callback_data }]
            }
        })
    }*/
}

export const handleIntervalKeyboard = (data) => {
    return {
        inline_keyboard: [
            data === '3td' ? [{ text: '–•–æ—á—É 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å ‚úÖ', callback_data: '3td' }] : [{ text: '–•–æ—á—É 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å', callback_data: '3td' }],
            data === '1td' ? [{ text: '–†–∞–∑ –≤ –¥–µ–Ω—å ‚úÖ', callback_data: '1td' }] : [{ text: '–†–∞–∑ –≤ –¥–µ–Ω—å', callback_data: '1td' }],
            data === '1tw' ? [{ text: '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é ‚úÖ', callback_data: '1tw' }] : [{ text: '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1tw' }],
            data === 'button' ? [{ text: '–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á—É! –î–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É üî¥ ‚úÖ', callback_data: 'button' }] : [{ text: '–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á—É! –î–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É üî¥', callback_data: 'button' }],
            [{ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'intervalConfirm' }],
        ]
    }
}