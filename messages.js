require('./models');
const mongoose = require('mongoose');
const { rationKeyboard, geoKeyboard } = require('./keyboards');
const { DishSearch } = require('./dishSearch');
const { handleHateKeyboard, handleMeatKeyboard, handleJunkKeyboard, handleIntervalKeyboard } = require('./handleKeyboards');
const { mainKeyboard, UTCKeyboard } = require('./keyboards');
const { Dish } = require('./dish');
const { Timezone } = require('./timezone');

exports.Message = async (bot, msg) => {
    const Preferences = mongoose.model('preferences');
    const chatId = msg.chat.id;
    const text = msg.text;
    if (text === '/start') {
        const startSession = async () => {
            try {
                bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/start.jpg',
                    {
                        caption: '<b>–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ OnlyMeal</b>\n–≠—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –∏ —Å–ø–∞—Å–∞—Ç—å –ª—é–¥–µ–π –æ—Ç –º—É—á–µ–Ω–∏–π –≤—ã–±–æ—Ä–∞ –µ–¥—ã.',
                        reply_markup: rationKeyboard,
                        parse_mode: "HTML",
                    });
            } catch (err) {
                console.log(' '); console.log('–û—à–∏–±–∫–∞!'); console.log(' '); console.log(err);
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                    {
                        caption: `<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:\n ${err}`,
                        parse_mode: "HTML",
                    });
            }
        }

        startSession();
    }

    if (text === '–†–∞—Ü–∏–æ–Ω') {
        const dbdata = (await Preferences.findOne({ chatId: chatId }, 'meat').exec()).toObject()?.meat;
        console.log(dbdata)
        bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/dislike.jpg',
            {
                caption: '<b>–õ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–∏—â–µ. –ú–æ–∂–µ—Ç –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è (–æ—Ç–º–µ—Ç—å —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)',
                parse_mode: "HTML",
                reply_markup: handleMeatKeyboard(dbdata),
            })
    }

    if (text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚è∞' || text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ') {
        bot.sendMessage(msg.chat.id, 'üåê –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+03:00\nüõ† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±–ß–ß:–ú–ú.\nüó∫ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
            {
                parse_mode: "HTML",
                reply_markup: geoKeyboard
            });
    }

    if (msg.location !== undefined) {
        bot.sendMessage(msg.chat.id, `üåê –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${await Timezone(msg.location.latitude, msg.location.longitude)}`,
            {
                parse_mode: "HTML",
                reply_markup: UTCKeyboard
            });
    }

    if (text.indexOf(':') !== -1) {
        const hours = Number(text.slice(1, -3)) * 3600;
        const minutes = Number(text.slice(4)) * 60;
        await Preferences.findOneAndUpdate({ chatId: chatId }, { timezone: { offset: hours + minutes, timeZoneId: null } });
        bot.sendMessage(msg.chat.id, `üåê –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${text}`,
            {
                parse_mode: "HTML",
                reply_markup: UTCKeyboard
            });
    }

    /*if (text === '–†–∞—Å–ø–∏–∞–Ω–∏–µ ‚è∞') {
        const dbdata = (await Preferences.findOne({ chatId: chatId }, 'interval').exec()).toObject()?.interval;
        bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/schedule.jpg',
            {
                caption: '–•–æ—Ä–æ—à–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–¥–µ–∏?',
                reply_markup: handleIntervalKeyboard(dbdata),
                });
    }*/

    if (text === '–ë–ª—é–¥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòã') {
        const dbdata = (await Preferences.findOne({ chatId: chatId }).exec())?.toObject();
        //const filters = Object.assign(dbdata?.hate, dbdata?.meat, { junk: dbdata?.junk });
        //const info = await DishSearch(filters);
        Dish(bot, dbdata, msg)
    }
}