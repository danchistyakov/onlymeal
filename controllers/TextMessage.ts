import {geoKeyboard, rationKeyboard, UTCKeyboard} from '../modules/keyboards';
import {handleIntervalKeyboard, handleMeatKeyboard} from '../modules/handleKeyboards';
import Timezone from '../timezone';
import Dish from '../services/dish';
import UserModel from '../models/UserModel';

const TextMessage = async (bot, msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start') {
    return bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/start.jpg',
      {
        caption: '<b>–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ OnlyMeal</b>\n–≠—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –∏ —Å–ø–∞—Å–∞—Ç—å –ª—é–¥–µ–π –æ—Ç –º—É—á–µ–Ω–∏–π –≤—ã–±–æ—Ä–∞ –µ–¥—ã.',
        reply_markup: rationKeyboard,
        parse_mode: 'HTML',
      });
  }

  if (text === '–†–∞—Ü–∏–æ–Ω') {
    const dbdata = (await UserModel.findOne({chatId: chatId}, 'meat').exec()).toObject().meat;
    console.log(dbdata)
    return bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/dislike.jpg',
      {
        caption: '<b>–õ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–∏—â–µ. –ú–æ–∂–µ—Ç –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è (–æ—Ç–º–µ—Ç—å —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)',
        parse_mode: 'HTML',
        reply_markup: handleMeatKeyboard(dbdata),
      })
  }

  if (text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚è∞' || text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ') {
    const dbdata = (await UserModel.findOne({chatId: chatId}, 'timezone').exec()).toObject().timezone.offsetRaw;
    const hours = Math.floor(dbdata / 3600);
    const minutes = Math.floor((dbdata % 3600) / 60);
    return bot.sendMessage(chatId, `üåê –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${dbdata > 0 ? '+' : ''}${dbdata === 0 ? '¬±' : ''}${hours < 10 ? '0' + hours : hours}:${minutes === 0 ? minutes + '0' : minutes}\nüõ† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±–ß–ß:–ú–ú.\nüó∫ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.`,
      {
        parse_mode: 'HTML',
        reply_markup: geoKeyboard
      });
  }

  if (msg.location !== undefined) {
    return bot.sendMessage(chatId, `üåê –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${await Timezone(msg.location.latitude, msg.location.longitude, chatId)}`,
      {
        parse_mode: 'HTML',
        reply_markup: UTCKeyboard
      });
  }

  if (text.indexOf(':') !== -1 && (text.indexOf('+') !== -1 || text.indexOf('-') !== -1 || text.indexOf('¬±') !== -1)) {
    const hours = Number(text.slice(0, -3)) * 3600;
    const minutes = Number(text.slice(4)) * 60;
    await UserModel.findOneAndUpdate({chatId: chatId}, {
      timezone: {
        offsetRaw: hours > 0 ? hours + minutes : hours - minutes,
        offsetMos: (hours > 0 ? hours + minutes : hours - minutes) - 10800
      }
    });
    return bot.sendMessage(msg.chat.id, `üåê –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${text}`,
      {
        parse_mode: 'HTML',
        reply_markup: UTCKeyboard
      });
  }

  if (text === '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
    const dbdata = (await UserModel.findOne({chatId: chatId}, 'interval').exec()).toObject().interval;
    return bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/schedule.jpg',
      {
        caption: '–•–æ—Ä–æ—à–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–¥–µ–∏?',
        reply_markup: handleIntervalKeyboard(dbdata),
      });
  }

  if (text === '–ë–ª—é–¥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòã') {
    const dbdata = (await UserModel.findOne({chatId: chatId}).exec()).toObject();
    return Dish(bot, dbdata, chatId);
  }
  return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ`);
}

export default TextMessage;