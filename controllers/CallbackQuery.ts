import InitDB from '../services/InitDB';
import UserModel from '../models/UserModel';
import TextMessage from './TextMessage';
import {
  handleHateKeyboard,
  handleIntervalKeyboard,
  handleJunkKeyboard,
  handleMeatKeyboard
} from '../modules/handleKeyboards';
import Dish from '../services/dish';
import Cancel from '../services/canceller';
import {geoKeyboard,mainKeyboard} from '../modules/keyboards';

const CallbackQuery = (bot) => {
  /*let hate = null;
  let meat = null;
  let junk = null;
  let interval = null;*/
  bot.on('callback_query', async msg => {
    //return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', { parse_mode: "HTML" });
    const {data, message} = msg;
    const chatId = message.chat.id;
    const messageId = message.message_id;
    const dbdata = (await UserModel.findOne({chatId}).exec()).toObject();
    let {hate, interval, junk, meat} = dbdata;

    if (data === 'setRation' || data === 'hateBack') {
      bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/dislike.jpg',
        {
          caption: '<b>–õ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–∏—â–µ. –ú–æ–∂–µ—Ç –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è (–æ—Ç–º–µ—Ç—å —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).',
          parse_mode: 'HTML',
          reply_markup: handleHateKeyboard(hate),
        });
    }

    if (['hatemilk', 'hatefruits', 'hatevegetables', 'hatefish', 'hatesweet', 'hatesalt'].includes(data)) {
      hate[data.slice(4)] = !hate[data.slice(4)];
      bot.editMessageReplyMarkup(handleHateKeyboard(hate), {message_id: messageId, chat_id: chatId})
    }

    if (data === 'hateMeat') {
      await UserModel.findOneAndUpdate({chatId: chatId}, {hate: hate})
      bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/meat.jpg',
        {
          parse_mode: 'HTML',
          caption: '<b>–ú—è—Å–æ</b>\n–ú–æ–∂–µ—Ç –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è (–æ—Ç–º–µ—Ç—å —ç—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)',
          reply_markup: handleMeatKeyboard(meat),
        });
    }

    if (['hatepork', 'hatebeef', 'hatechicken', 'hatemutton'].includes(data)) {
      meat[data.slice(4)] = !meat[data.slice(4)];
      bot.editMessageReplyMarkup(handleMeatKeyboard(meat), {message_id: messageId, chat_id: chatId})
    }

    if (data === 'hateJunk') {
      await UserModel.findOneAndUpdate({chatId: chatId}, {meat: meat});
      bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/junk.jpg',
        {
          parse_mode: 'HTML',
          caption: '<b>–§–∞—Å—Ç—Ñ—É–¥</b>\n–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫¬†—Ñ–∞—Å—Ç—Ñ—É–¥—É, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º —Ç–µ–±–µ –µ–≥–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å.',
          reply_markup: handleJunkKeyboard(junk ? 'no' : 'yes'),
        });
    }

    if ((data === 'junkyes' && junk) || (data === 'junkno' && !junk)) {
      if (data.slice(4) === 'no') {
        junk = true;
        await UserModel.findOneAndUpdate({chatId: chatId}, {junk: true});
      }

      if (data.slice(4) === 'yes') {
        junk = false;
        await UserModel.findOneAndUpdate({chatId: chatId}, {junk: false});
      }

      bot.editMessageReplyMarkup(handleJunkKeyboard(data.slice(4)), {message_id: messageId, chat_id: chatId});
    }

    if (data === 'hateNext') {
      const dbdata = (await UserModel.findOne({chatId: chatId}, 'timezone').exec()).toObject().timezone.offsetRaw;
      const hours = Math.floor(dbdata / 3600);
      const minutes = Math.floor((dbdata % 3600) / 60);
      bot.sendMessage(chatId, `üåê –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC${dbdata > 0 ? '+' : ''}${dbdata < 0 ? '-' : ''}${dbdata === 0 ? '¬±' : ''}${hours < 10 ? '0' + Math.abs(hours) : Math.abs(hours)}:${minutes === 0 ? Math.abs(minutes) + '0' : Math.abs(minutes)}\nüõ† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±–ß–ß:–ú–ú.\nüó∫ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.`,
        {
          parse_mode: 'HTML',
          reply_markup: geoKeyboard
        });
    }

    if (['intervalNext'].includes(data)) {
      bot.sendPhoto(chatId, 'https://cdn.statically.io/img/tangerine.gq/q=91/onlymeal/schedule.jpg',
        {
          caption: '–•–æ—Ä–æ—à–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–¥–µ–∏?',
          reply_markup: handleIntervalKeyboard(interval),
        });
    }

    if (['3td', '1td', '1tw', 'button'].includes(data) && data !== interval) {
      interval = data;
      await UserModel.findOneAndUpdate({chatId: chatId}, {interval: data});
      bot.editMessageReplyMarkup(handleIntervalKeyboard(data), {message_id: messageId, chat_id: chatId})
    }

    if (data === 'intervalConfirm' && interval !== 'button') {
      //Scheduler(bot, chatId, dbdata, interval, true, false);
    }

    if (data === 'intervalConfirm' && interval === 'button') {
      await Dish(bot, dbdata, chatId);
    }

    if (data === 'stopSending') {
      Cancel();
      bot.sendMessage(chatId, '–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã —É—Ö–æ–¥–∏—Ç–µ :( –ú–æ–∂–µ—Ç —Å–º–µ–Ω–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏?');
    }

    if (data.indexOf('handleRate') !== -1) {
      const id = Number(data.slice(10));
      bot.sendMessage(chatId, '–ö–∞–∫ —Ç–µ–±–µ –±—ã–ª–æ —ç—Ç–æ –±–ª—é–¥–æ?', {
        reply_markup:
          {
            mainKeyboard,
            inline_keyboard: [
              [{text: 'üò©', callback_data: 'handleRating' + id + 1}, {
                text: 'üòü',
                callback_data: 'handleRating' + id + 2
              }, {text: 'üò¨', callback_data: 'handleRating' + id + 3}, {
                text: 'üòé',
                callback_data: 'handleRating' + id + 4
              }, {text: 'üòç', callback_data: 'handleRating' + id + 5}]
            ]
          }
      })
    }

    if (data.indexOf('handleRating') !== -1) {
      const rate = Number(data.slice(-1));
      const key = Number(data.slice(12, -1)) + 1;
      console.log('RATE: ' + rate);
      console.log('KEY: ' + key);
      //sendRating(rate, key);

      await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–Ω—è–ª–∏ ‚úÖ', {
        reply_markup: mainKeyboard,
      });

      //Scheduler(bot, chatId, dbdata, interval, true, true);
    }
  })
}

export default CallbackQuery;