const TelegramApi = require('node-telegram-bot-api');

const token = '1797063882:AAGUc2f0xS5C7PgAZ8_xINGcA1u6f7wKd_I';
const bot = new TelegramApi(token, { polling: true });
const schedule = require('node-schedule');
const { rationKeyboard, mainKeyboard } = require('./keyboards')
const { handleFavKeyboard, handleHateKeyboard, handleIntervalKeyboard } = require('./handleKeyboards');
const { Scheduler } = require('./Scheduler');
const { DishSearch } = require('./dishSearch');
const { sendRating } = require('./sendRating');
const sequelize = require('./db');
const UserModel = require('./models');
//const Amplitude = require('@amplitude/node');

//const client = Amplitude.init('f05658fc1d0cc2d7ffb26803b28c00a8');

const sendTime = (time, msg, text) => {
    new schedule.scheduleJob(`*/${time} * * * *`, function () {
        bot.sendMessage(msg.chat.id, text);
    });
}

const subCancel = () => {
    job.cancel();
    bot.sendMessage(msg.chat.id, '–û—Ç–º–µ–Ω–∏–ª');
}

const start = async () => {

    try {
        await sequelize.authenticate();
        await sequelize.sync();
    } catch (e) {
        console.log('–ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: ', e)
    }

    bot.setMyCommands([
        { command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    ]);

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        //console.log(msg);
        if (text === '/start') {
            try {
                console.log(' ')
                console.log('–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å!')
                console.log(' ')
                await UserModel.create({ chatId })
            } catch (err) {
                console.log(' ')
                console.log('–û—à–∏–±–∫–∞!')
                console.log(' ')
                console.log(err)
            }
            const startSession = () => {
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                    {
                        caption: '–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ä–∞—Ü–∏–æ–Ω!',
                        reply_markup: rationKeyboard,
                    });
            }
            return startSession()
        }

        if (text === '–†–∞—Ü–∏–æ–Ω') {
            const obj = await UserModel.findOne({ chatId });
            bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                {
                    caption: '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å?',
                    reply_markup: handleFavKeyboard(obj?.interval),
                })
        }

        if (text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚è∞') {
            const obj = await UserModel.findOne({ chatId });
            bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                {
                    caption: '–•–æ—Ä–æ—à–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–¥–µ–∏?',
                    reply_markup: handleIntervalKeyboard(obj?.interval),
                });
        }
        if (text === '–ë–ª—é–¥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòã') {
            const obj = await UserModel.findOne({ chatId });
            const answer = await DishSearch(JSON.parse(obj?.like), JSON.parse(obj?.hate));
            if (answer !== '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ –í–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å üòî') {
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png', {
                    caption: answer.meal,
                    reply_to_message_id: msg.message_id,
                    reply_markup:
                    {
                        mainKeyboard,
                        inline_keyboard: [
                            [{ text: '–°–∫—É—à–∞–Ω–æ ‚úÖ', callback_data: 'handleRate' + answer.key }],
                        ]
                    }
                });
            } else {
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png', {
                    caption: answer,
                    reply_to_message_id: msg.message_id,
                    reply_markup:
                    {
                        mainKeyboard,
                        inline_keyboard: [
                            [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º ‚¨ÖÔ∏è', callback_data: 'setRation' }],
                        ]
                    }
                });
            }
        }
    });

    bot.onText(/\/send/, msg => {
        return sendTime(1, msg, '—Ç–µ–∫—Å—Ç')
    })

    bot.onText(/\/zamolchi/, msg => {
        return subCancel()
    })

    //return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', { parse_mode: "HTML" });

    bot.on('callback_query', async msg => {
        //console.log(msg)
        const data = msg.data;
        const chatId = msg.message.chat.id;
        const messageId = msg.message.message_id;
        const obj = await UserModel.findOne({ chatId });
        const likeParsed = JSON.parse(obj?.like);
        const hateParsed = JSON.parse(obj?.hate);
        //console.log(likeParsed)
        if (data === 'setRation' || data === 'hateBack') {
            bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                {
                    caption: '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å?',
                    reply_markup: handleFavKeyboard(likeParsed),
                });
        }

        if (['likemeat', 'likemilk', 'likefruits', 'likefish'].includes(data)) {
            likeParsed[data.slice(4)] = !likeParsed[data.slice(4)];
            console.log(likeParsed)
            obj.like = JSON.stringify(likeParsed);
            await obj.save();
            bot.editMessageReplyMarkup(handleFavKeyboard(likeParsed), { message_id: messageId, chat_id: chatId })
        }

        if (data === 'likeNext') {
            bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                {
                    caption: '–ê —á—Ç–æ –Ω–µ –ª—é–±–∏—à—å –∏–ª–∏ –Ω–µ –µ—à—å –≤–æ–æ–±—â–µ?',
                    reply_markup: handleHateKeyboard(JSON.parse(obj?.hate)),
                });
        }

        if (['hatemeat', 'hatemilk', 'hatefruits', 'hatefish'].includes(data)) {
            hateParsed[data.slice(4)] = !hateParsed[data.slice(4)];
            console.log(hateParsed)
            obj.hate = JSON.stringify(hateParsed);
            await obj.save();
            bot.editMessageReplyMarkup(handleHateKeyboard(hateParsed), { message_id: messageId, chat_id: chatId })
        }

        if (data === 'hateNext') {
            bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png',
                {
                    caption: '–•–æ—Ä–æ—à–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –º—ã –±—É–¥–µ–º –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–¥–µ–∏?',
                    reply_markup: handleIntervalKeyboard(obj?.interval),
                });
        }

        if (['3td', '1td', '1tw', 'onreq'].includes(data)) {
            bot.editMessageReplyMarkup(handleIntervalKeyboard(data), { message_id: messageId, chat_id: chatId })
            obj.interval = data;
            await obj.save();
        }

        if (data === 'dishNext') {
            const cancel = true;
            Scheduler(bot, msg, chatId, obj.interval, obj, cancel);
        }

        if (data === 'handleStop') {
            const cancel = false;
            Scheduler(bot, msg, chatId, obj.interval, obj, cancel);
        }

        if (data === 'handleTry') {
            const answer = await DishSearch(JSON.parse(obj?.like), JSON.parse(obj?.hate));
            if (answer !== '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ –í–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å üòî') {
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png', {
                    caption: answer.meal,
                    reply_to_message_id: msg.message_id,
                    reply_markup:
                    {
                        mainKeyboard,
                        inline_keyboard: [
                            [{ text: '–°–∫—É—à–∞–Ω–æ ‚úÖ', callback_data: 'handleRate' + answer.key }],
                            [{ text: '–ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ‚úÖ', callback_data: 'handleStop' }],
                        ]
                    }
                });
            } else {
                bot.sendPhoto(chatId, 'https://ik.imagekit.io/onlymeal/Frame_26options_zMmm82QbF.png', {
                    caption: answer,
                    reply_to_message_id: msg.message_id,
                    reply_markup:
                    {
                        mainKeyboard,
                        inline_keyboard: [
                            [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º ‚¨ÖÔ∏è', callback_data: 'setRation' }],
                        ]
                    }
                });
            }
        }

        if (data.indexOf('handleRate') !== -1) {
            const key = Number(data.slice(10));
            console.log(key)
            bot.sendMessage(chatId, '–ö–∞–∫ —Ç–µ–±–µ –±—ã–ª–æ —ç—Ç–æ –±–ª—é–¥–æ?', {
                reply_markup:
                {
                    mainKeyboard,
                    inline_keyboard: [
                        [{ text: 'üò©', callback_data: 'handleRating' + key + 1 }, { text: 'üòü', callback_data: 'handleRating' + key + 2 }, { text: 'üò¨', callback_data: 'handleRating' + key + 3 }, { text: 'üòé', callback_data: 'handleRating' + key + 4 }, { text: 'üòç', callback_data: 'handleRating' + key + 5 }]
                    ]
                }
            })
        }

        if (data.indexOf('handleRating') !== -1) {
            const rate = Number(data.slice(-1));
            const key = Number(data.slice(12, -1));
            //console.log(rate, key)
            sendRating(rate, key)
            bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', {
                reply_markup: mainKeyboard,
            })
        }
    })
}
start();