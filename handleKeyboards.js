exports.handleFavKeyboard = (items) => {
    const keyboard = [
        [{ text: 'üçñ –ú—è—Å–æ', callback_data: 'likemeat' }],
        [{ text: 'ü•õ –ú–æ–ª–æ–∫–æ', callback_data: 'likemilk' }],
        [{ text: 'üçç –§—Ä—É–∫—Ç—ã', callback_data: 'likefruits' }],
        [{ text: 'üêü –†—ã–±–∞', callback_data: 'likefish' }],
        [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'likeNext' }],
    ]
    //console.log(typeof items)
    return {
        inline_keyboard: keyboard.map((item, key) => {
            var index = Object.keys(items)[key];
            //console.log(index)
            const bool = items[index];
            if (keyboard.length - key !== 1) {
                return item.map(item => {
                    return bool ? { text: '‚úÖ ' + item?.text, callback_data: 'like' + index } : { text: item?.text, callback_data: 'like' + index }
                })
            } else {
                return [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'likeNext' }]
            }
        })
    }
}

exports.handleHateKeyboard = (items) => {
    const keyboard = [
        [{ text: 'üçñ –ú—è—Å–æ', callback_data: 'hatemeat' }],
        [{ text: 'ü•õ –ú–æ–ª–æ–∫–æ', callback_data: 'hatemilk' }],
        [{ text: 'üçç –§—Ä—É–∫—Ç—ã', callback_data: 'hatefruits' }],
        [{ text: 'üêü –†—ã–±–∞', callback_data: 'hatefish' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'hateBack' }],
        [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'hateNext' }],
    ]

    return {
        inline_keyboard: keyboard.map((item, key) => {
            var index = Object.keys(items)[key];
            const bool = items[index];
            if (keyboard.length - key > 2) {
                return item.map(item => {
                    return bool ? { text: '‚úÖ ' + item?.text, callback_data: 'hate' + index } : { text: item?.text, callback_data: 'hate' + index }
                })
            } else {
                return [{ text: item[0]?.text, callback_data: item[0]?.callback_data }]
            }
        })
    }
}

exports.handleIntervalKeyboard = (data) => {
    return {
        inline_keyboard: [
            data === '3td' ? [{ text: '‚úÖ –•–æ—á—É 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å', callback_data: '3td' }] : [{ text: '–•–æ—á—É 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å', callback_data: '3td' }],
            data === '1td' ? [{ text: '‚úÖ –†–∞–∑ –≤ –¥–µ–Ω—å', callback_data: '1td' }] : [{ text: '–†–∞–∑ –≤ –¥–µ–Ω—å', callback_data: '1td' }],
            data === '1tw' ? [{ text: '‚úÖ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1tw' }] : [{ text: '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1tw' }],
            data === 'onreq' ? [{ text: '‚úÖ –ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á—É! –î–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É üî¥', callback_data: 'onreq' }] : [{ text: '–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á—É! –î–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É üî¥', callback_data: 'onreq' }],
            [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'dishNext' }],
        ]
    }
}